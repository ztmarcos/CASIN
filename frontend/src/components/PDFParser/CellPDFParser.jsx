import React, { useState } from 'react';
import pdfService from '../../services/pdfService';
import './CellPDFParser.css';

const CellPDFParser = ({ columnName, tableName, onValueExtracted }) => {
  const [isAnalyzing, setIsAnalyzing] = useState(false);
  const [error, setError] = useState('');

  const handlePdfUpload = async (event) => {
    const file = event.target.files[0];
    if (!file) return;

    if (file.type !== 'application/pdf') {
      setError('Por favor selecciona un archivo PDF');
      return;
    }

    setIsAnalyzing(true);
    setError('');
    
    try {
      // Parse PDF content
      const data = await pdfService.parsePDF(file);
      
      // Create simplified prompt specifically for the column
      const prompt = {
        text: data.text,
        metadata: data.metadata,
        targetColumns: [columnName], // Corregido: usar 'targetColumns' como espera el backend
        tableName: tableName || 'default_table', // Usar el tableName real pasado como prop
        tableInfo: {
          type: 'simple',
          columns: [columnName]
        },
        instructions: `
                    Por favor analiza el documento y extrae la siguiente informaci√≥n:
                    ${[columnName].map(col => {
                      if (col === 'pago_parcial') {
                        console.log('üö® DEBUG: Generating special prompt for pago_parcial column');
                        return `- ${col}: ¬°IMPORTANTE! Este es un AVISO DE PAGO/RECIBO. DEBES encontrar el MONTO TOTAL que se debe pagar. Busca TODOS los n√∫meros con formato de dinero ($1,234.56, 2,500.00, etc.) y selecciona el M√ÅS GRANDE. NUNCA devuelvas 0.00 o null - SIEMPRE hay un total a pagar en estos documentos.`;
                      }
                      return `- ${col}: Encuentra el valor exacto en el texto`;
                    }).join('\n')}
                    
                    Reglas importantes:
                    1. Extrae valores EXACTOS del documento
                    2. No repitas valores en diferentes campos
                    3. Para pago_parcial: NUNCA devuelvas null, 0.00, o valores vac√≠os - SIEMPRE encuentra al menos un monto de dinero
                    4. Para otros campos: Devuelve null si no se puede encontrar un valor
                    5. Para fechas, mant√©n el formato como se muestra en el documento
                    6. Para valores monetarios, incluye la cantidad completa con decimales
                    6. Para campos de texto, extrae el texto completo como se muestra
                    
                    REGLAS ESPEC√çFICAS PARA EMAIL:
                    7. PARA CAMPOS EMAIL: NO captures emails de compa√±√≠as de seguros (como @gnp.com.mx, @axa.com.mx, @qualitas.com.mx, etc.)
                    8. PARA CAMPOS EMAIL: Solo captura emails personales del contratante/asegurado (gmail.com, hotmail.com, yahoo.com, outlook.com, etc.)
                    9. PARA CAMPOS EMAIL: Si solo encuentras emails corporativos de aseguradoras, devuelve null
                    
                    REGLAS ESPEC√çFICAS PARA NOMBRES:
                    10. DISTINGUIR ENTRE CLIENTE Y PROPIETARIO: Cuando el documento mencione tanto "cliente" como "propietario" o "titular", captura ambos por separado
                    11. CAMPO "contratante": Usar el nombre del CLIENTE (quien contrata la p√≥liza)
                    12. CAMPO "propietario" o "titular": Usar el nombre del PROPIETARIO del veh√≠culo/inmueble
                    13. Si ambos son la misma persona, usar el mismo nombre en ambos campos
                    
                    REGLAS ESPEC√çFICAS PARA PAGOS:
                    14. CAMPO "pago_parcial": ¬°CR√çTICO! Este documento es un AVISO DE PAGO/RECIBO - SIEMPRE tiene un total
                    15. Busca TODOS los n√∫meros con formato de dinero en el documento (ej: $1,500.00, 2,300.50, $500, 1500.00, 2300.50)
                    16. T√©rminos espec√≠ficos a buscar: "Total", "Total a Pagar", "Importe Total", "Monto Total", "Prima Total", "Pago Total", "Cantidad Total", "Suma Total", "Importe", "Monto", "Prima", "Pago", "Cantidad", "Suma"
                    17. Busca n√∫meros precedidos por: "$", "MXN", "pesos", "Total:", "Importe:", "Monto:", o simplemente n√∫meros grandes
                    18. Si encuentras m√∫ltiples cantidades, SIEMPRE usa el N√öMERO M√ÅS GRANDE (que es el total)
                    19. PROHIBIDO devolver 0.00, null, o valores vac√≠os para pago_parcial
                    20. Si no encuentras un total espec√≠fico, busca CUALQUIER n√∫mero que parezca un monto de dinero
                    21. EJEMPLO: Si ves "Aviso de Pago", "Recibo", "Factura" - SIEMPRE contiene un total a pagar
                    22. Busca patrones como: "$1,234.56", "Total: 2,500", "Importe Total 1500.00", "Prima Total $800", "1500.00", "2,500"
                    23. Si el documento menciona "Gastos M√©dicos", "Seguro", "P√≥liza" - SIEMPRE hay un monto a pagar
                    
                    REGLAS DE NORMALIZACI√ìN DE TEXTO:
                    18. NOMBRES DE ASEGURADORA: Siempre normaliza "Grupo Nacional Provincial, S.A.B.", "Grupo Nacional Provincial S.A.B.", "Grupo Naci√≥n Aprovincial", "Grupo Nacional Aprovincial", "GNP Seguros", "G.N.P.", o cualquier variaci√≥n a "GNP"
                    19. NOMBRES DE PERSONAS: Convierte a formato T√≠tulo Apropiado (ej., "JUAN P√âREZ L√ìPEZ" ‚Üí "Juan P√©rez L√≥pez", mant√©n "de", "del", "la" en min√∫sculas)
                    20. DIRECCIONES: Estandariza abreviaciones (Av. ‚Üí Avenida, Col. ‚Üí Colonia, No. ‚Üí N√∫mero, etc.) y usa formato T√≠tulo
                    21. CAMPOS RFC: Mant√©n el RFC exactamente como se encuentra, solo en may√∫sculas y sin espacios extra
                    22. TEXTO GENERAL: Limpia espacios extra, normaliza comillas y apostrofes
                    23. NO normalices valores RFC m√°s all√° de may√∫sculas y limpieza de espacios
                    
                    NORMALIZACI√ìN ESPEC√çFICA POR CAMPO:
                    - contratante: Usar nombre del CLIENTE (quien contrata), aplicar normalizaci√≥n de nombres (formato T√≠tulo)
                    - propietario/titular: Usar nombre del PROPIETARIO del veh√≠culo/inmueble, aplicar normalizaci√≥n de nombres (formato T√≠tulo)
                    - direccion: Aplicar normalizaci√≥n de direcciones (estandarizar abreviaciones + formato T√≠tulo)
                    - rfc: Solo may√∫sculas y quitar espacios, sin otros cambios
                    - email: Solo emails personales, evitar emails corporativos de aseguradoras
                    - aseguradora: Aplicar normalizaci√≥n de nombres de aseguradoras (principalmente GNP)
                    - pago_parcial: ¬°CR√çTICO! Captura el TOTAL del recibo/factura/aviso de pago - NUNCA devolver null, 0.00, o valores vac√≠os - SIEMPRE buscar el monto total a pagar
                    - Todos los dem√°s campos de texto: Aplicar limpieza general de texto y normalizaci√≥n de nombres de compa√±√≠as
                `
      };

      // Call GPT analysis endpoint using relative URL (will be proxied by Vite)
      const response = await fetch('/api/gpt/analyze', {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
        },
        body: JSON.stringify(prompt),
      });

      if (!response.ok) {
        const errorText = await response.text();
        console.error('Server response:', errorText);
        throw new Error(`Error del servidor: ${response.status} - ${errorText}`);
      }

      const result = await response.json();
      console.log('‚úÖ GPT Analysis result:', result);
      
      // Debug: Log the full prompt that was sent
      console.log('üîç DEBUG: Prompt sent to GPT:', JSON.stringify(prompt, null, 2));
      
      // Check multiple possible response formats
      let extractedValue = null;
      
      console.log('üîç Full GPT result:', result);
      
      // Check in mappedData
      if (result.mappedData && result.mappedData[columnName] !== undefined) {
        extractedValue = result.mappedData[columnName];
        console.log('üìã Found in mappedData:', extractedValue);
      } 
      // Check in columnAnalysis (new format)
      else if (result.columnAnalysis && result.columnAnalysis[columnName]) {
        extractedValue = result.columnAnalysis[columnName].extractedValue;
        console.log('üìã Found in columnAnalysis:', extractedValue);
      }
      // Check directly in result
      else if (result[columnName] !== undefined) {
        extractedValue = result[columnName];
        console.log('üìã Found directly in result:', extractedValue);
      } 
      // Check in data property
      else if (result.data && result.data[columnName] !== undefined) {
        extractedValue = result.data[columnName];
        console.log('üìã Found in data:', extractedValue);
      }
      
      if (extractedValue !== null) {
        onValueExtracted(extractedValue || '');
        console.log(`‚úÖ Extracted value for ${columnName}:`, extractedValue);
      } else {
        setError(`No se pudo extraer el valor para '${columnName}' del PDF`);
        console.warn(`‚ùå No value found for column '${columnName}' in result:`, result);
      }
      
    } catch (err) {
      console.error('‚ùå Error analyzing PDF:', err);
      setError(`Error al analizar PDF: ${err.message}`);
    } finally {
      setIsAnalyzing(false);
    }
  };

  return (
    <div className="cell-pdf-parser">
      <div className="column-info">
        <strong>Extrayendo: {columnName}</strong>
        <p>Tabla: {tableName} ‚Ä¢ Sube un PDF para extraer autom√°ticamente el valor de esta columna</p>
      </div>
      
      {error && (
        <div className="error-message" style={{ 
          color: '#dc3545', 
          backgroundColor: '#f8d7da', 
          border: '1px solid #f5c6cb',
          padding: '8px',
          borderRadius: '4px',
          marginBottom: '10px',
          fontSize: '14px'
        }}>
          {error}
        </div>
      )}
      
      <label className="file-input-label">
        <input
          type="file"
          accept=".pdf"
          onChange={handlePdfUpload}
          disabled={isAnalyzing}
          className="file-input"
        />
        <span className="file-input-text">
          {isAnalyzing ? `üîÑ Analizando PDF para ${columnName}...` : `üìÑ Seleccionar PDF para ${columnName}`}
        </span>
      </label>
      
      {isAnalyzing && (
        <div className="analyzing-status" style={{
          display: 'flex',
          alignItems: 'center',
          gap: '8px',
          marginTop: '10px',
          color: '#0066cc',
          fontSize: '14px'
        }}>
          <div style={{
            width: '16px',
            height: '16px',
            border: '2px solid #f3f3f3',
            borderTop: '2px solid #0066cc',
            borderRadius: '50%',
            animation: 'spin 1s linear infinite'
          }}></div>
          Procesando PDF y extrayendo '{columnName}'...
        </div>
      )}
    </div>
  );
};

export default CellPDFParser; 