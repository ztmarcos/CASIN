CRUD Database Application Documentation
=====================================

Project Overview
---------------
This is a React-based CRUD (Create, Read, Update, Delete) database application with a modern architecture, consisting of a frontend built with React/Vite and a backend infrastructure. The application handles data management, file relations, and includes features like PDF parsing and SharePoint integration.

Directory Structure
------------------
/
├── src/                    # Frontend React application source code
│   ├── components/         # React components
│   │   ├── DataDisplay/   # Data presentation components
│   │   ├── Datapool/      # Data management components
│   │   ├── DataSection/   # Data section organization
│   │   ├── Layout/        # Application layout components
│   │   ├── PDFParser_new/ # PDF parsing and GPT analysis
│   │   ├── ColumnManager/ # Database column management
│   │   ├── TableManager/  # Database table management
│   │   └── Sidebar/       # Navigation sidebar
│   ├── App.jsx            # Main application component
│   └── main.jsx           # Application entry point
│
├── backend/               # Backend server infrastructure
│   ├── routes/           # API route definitions
│   │   ├── sharepointRoutes.js
│   │   └── email.js
│   ├── migrations/       # Database migration files
│   └── services/         # Business logic services
│
├── docs/                 # Project documentation
└── migrations/          # Database migrations

Key Components
-------------
1. Frontend Components:
   - DataTable.jsx: Handles data display and interaction
   - Datapool.jsx: Manages data pooling and organization
   - DataSection.jsx: Organizes different data sections
   - Layout.jsx: Provides the application's main layout structure
   - GPTAnalysis.jsx: Integrates GPT analysis for PDF content
   - ColumnManager.jsx: Manages database column operations
   - TableManager.jsx: Handles database table operations

2. Backend Services:
   - sharepointRoutes.js: Handles SharePoint integration
   - email.js: Email functionality
   - fileRelationService.js: Manages file relationships

3. Database Structure:
   - Multiple migration files for table creation and updates
   - Includes sharepoint tables and column metadata

Technologies Used
---------------
- Frontend: React with Vite
- Backend: Node.js
- Database: SQL (with migrations)
- Additional Services:
  - SharePoint Integration
  - Email Services
  - PDF Parsing
  - GPT Analysis

Best Practices Implemented
------------------------
1. Component Organization:
   - Modular component structure
   - Separation of concerns
   - Reusable components

2. Data Management:
   - Structured database migrations
   - Organized table and column management
   - Efficient data relations

3. UI/UX:
   - Consistent layout structure
   - Responsive design
   - User-friendly data display

4. Code Organization:
   - Clear directory structure
   - Separated business logic
   - Modular routing

Development Guidelines
--------------------
1. Always maintain careful DOM rendering practices
2. Implement changes incrementally
3. Test thoroughly before connecting new components to App.jsx
4. Verify dashboard.jsx and app.jsx compatibility
5. Handle map errors proactively
6. Follow established component patterns

Security Considerations
---------------------
- Environment variables for sensitive data
- Firebase admin SDK integration
- Secure API endpoints
- Protected routes implementation

Note: This documentation should be updated as the application evolves. Regular reviews and updates are recommended to maintain accuracy. 